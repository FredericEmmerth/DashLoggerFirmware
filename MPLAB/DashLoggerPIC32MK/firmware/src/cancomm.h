/**
 * @file cancomm.h
 * @brief This File defines the Prototypes for \ref CANCOMM
 * 
 * @author Frederic Emmerth
 * 
 * \ingroup CANCOMM
 * 
 */



/**
 * \defgroup CANCOMM CANCOMM
 * This Module is configured using a list of \ref cancomm_interface Structs.
 * These provide the Recieve and Transmit Functions for the CAN Interface. Which
 * Messages should be recieved and transmitted is configured using a list of
 * \ref cancomm_message Structs.
 * 
 * \todo Implement Transmit Functionality
 * \bug Only Interface One was tested
 * 
 * \addtogroup CANCOMM
 * \{
 */

#ifndef CANCOMM_H
#define	CANCOMM_H

#ifdef	__cplusplus
extern "C" {
#endif
    
#include "definitions.h" 

/**
 * @brief The Maximum Bytes of Data per CAN Frame
 */
#define CANCOMM_MAXIMUM_DATA_LENGTH     8
    
/**
 * @brief The Maximum Friendly Name Length of the CAN Messages
 */
#define CANCOMM_MAXIMUM_NAME_LENGTH     30

    
/**
 * @brief Structure defining a CAN Interface
 */
typedef struct{
    /**
     * @brief The Interface Number (Has to be unique)
     */
    uint8_t number;
    
    /**
     * @brief The FIFO Number used for Recieving Frames
     */
    uint8_t receiveFifo;
    
    /**
     * @brief The FIFO Number used for Transmitting Frames
     */
    uint8_t transmitFifo;
    
    /**
     * @brief Callback Function to Transmit CAN Messages
     * 
     * This Function matches the Protoype generated by MPLAB Harmony, so this 
     * Function Pointer can be set the the Functions generated by Harmony.
     * 
     * \param id            The ID of the Message
     * \param length        The DLC of the Message
     * \param data          The Data Bytes the Message should have
     * \param fifoQueueNum  The Number of the transmit FIFO
     * \param mode          For non CAN-FD Messages this is CANFD_MODE_NORMAL
     * \param msgAttr       For a Data Frame this is CANFD_MSG_TX_DATA_FRAME
     * 
     * \return True if the Message was sucessfully added to the transmit FIFO
     */
    bool (*MessageTransmit)(uint32_t id,
            uint8_t length, uint8_t* data,
            uint8_t fifoQueueNum, CANFD_MODE mode,
            CANFD_MSG_TX_ATTRIBUTE msgAttr);
    
    /**
     * @brief Callback Function to Recieve CAN Messages
     * 
     * This Function matches the Protoype generated by MPLAB Harmony, so this 
     * Function Pointer can be set the the Functions generated by Harmony.
     * 
     * \param id            The ID of the Recieved Message
     * \param length        The DLC of the Recieved Message
     * \param data          The Data of the Recieved Message
     * \param timestamp     The Timestamp of the Recieved Message
     * \param fifoNum       The FIFO used for recieving Messages
     * \param msgAttr       If the recieved Message was a Data Frame, this is
     *                      CANFD_MSG_TX_DATA_FRAME
     * 
     * \returns             False if there is no Message in the Recieve FIFO left
     * 
     */
    bool (*MessageReceive)(uint32_t *id,
            uint8_t *length, uint8_t *data,
            uint32_t *timestamp, uint8_t fifoNum,
            CANFD_MSG_RX_ATTRIBUTE *msgAttr);
}cancomm_interface;


/**
 * @brief Structure defining a CAN Message
 */
typedef struct{
    /**
     * @brief The ID of the Message
     */
    uint32_t id;
    
    /**
     * @brief The interface number (wich has to be unique to a CAN Interface)
     */
    uint8_t interface_number;
    
    /**
     * @brief The DLC of the Message
     */
    uint8_t length;
    
    /**
     * @brief The Data of the Message
     */
    uint8_t data [CANCOMM_MAXIMUM_DATA_LENGTH];
    
    /**
     * @brief The timestamp when the Message was recieved
     */
    uint32_t timestamp;
    
    /**
     * @brief A friendly Human Readable Name for the Message
     */
    uint8_t friendly_name [CANCOMM_MAXIMUM_NAME_LENGTH];
}cancomm_message;


/**
 * @brief This function recieves the CAN Messages defined in a message_list
 * using the provided interface_list.
 * @param message_list  List of \ref cancom_message Structs
 * @param message_list_len  Length of \p message_list
 * @param interface_list    List of \ref cancomm_interface Structs
 * @param interface_list_len Length of \p interface_list
 */
void CANCOMM_ReadMessages(cancomm_message* message_list,
        uint32_t message_list_len,
        cancomm_interface* interface_list,
        uint8_t interface_list_len);

#ifdef	__cplusplus
}
#endif

#endif	/* CANCOMM_H */

/**
 * \}
 */
